---
import { getCollection } from "astro:content";
import SearchIcon from "virtual:icons/tabler/search";
import XIcon from "virtual:icons/tabler/x";

const posts = await Promise.all(
  (await getCollection("posts")).map(async (post) => ({
    title: post.data.title,
    description: post.data.description,
    slug: post.slug,
  })),
);
---

<div class="relative ml-auto w-full">
  <button
    aria-label="Search posts"
    class="flex items-center text-black focus:rounded-md focus:outline-2 focus:outline-offset-2 focus:outline-base-500 dark:text-white"
    id="searchButton"
    type="button"
  >
    <SearchIcon class="size-4" />
  </button>

  <div aria-modal="true" class="fixed inset-0 z-50 hidden overflow-y-auto" id="searchModal" role="dialog">
    <div class="min-h-screen px-4 text-center">
      <div class="fixed inset-0 bg-zinc-950/50 backdrop-blur transition-opacity" id="modalOverlay"></div>
      <div
        class="mt-12 mb-8 inline-block w-full max-w-2xl transform px-8 text-left align-middle transition-all lg:mt-48"
      >
        <div class="hidden">
          <button
            aria-label="Close search"
            class="ml-auto cursor-pointer text-zinc-400 hover:text-zinc-500"
            id="closeSearch"
            type="button"
          >
            <XIcon class="size-4" />
          </button>
        </div>
        <input
          class="h-10 w-full flex-auto appearance-none rounded-full border-transparent bg-base-50 px-3 py-2 text-center text-base-900 shadow-base-800/5 duration-300 placeholder:text-base-600 focus:outline-2 focus:outline-offset-2 focus:outline-accent-500 sm:text-sm dark:bg-base-800 dark:text-white dark:outline-base-800 dark:placeholder:text-base-400"
          id="searchInput"
          placeholder="Search posts..."
          type="text"
        />
        <div
          class="mt-2 scrollbar-hide max-h-100 w-full divide-y divide-zinc-200 overflow-hidden overflow-y-auto rounded-xl border-y border-zinc-200 bg-white dark:divide-white/5 dark:border-y-black dark:bg-black"
          id="searchResults"
        >
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ posts }} is:inline>
  // Wait for the entire page to load before running the script
  window.addEventListener("load", () => {
    // Get references to various elements in the search UI
    const searchButton = document.getElementById("searchButton"); // Button that opens search modal
    const searchModal = document.getElementById("searchModal"); // Search modal container
    const modalOverlay = document.getElementById("modalOverlay"); // Overlay that closes modal on click
    const searchInput = document.getElementById("searchInput"); // Input field for searching
    const searchResults = document.getElementById("searchResults"); // Container for search results
    const closeSearch = document.getElementById("closeSearch"); // Button to close search modal
    // Initialize Fuse.js for fuzzy searching with posts data
    const fuse = new window.Fuse(posts, {
      keys: ["title", "description"], // Fields to search within
      threshold: 0.3, // Controls search sensitivity (lower = more strict)
      includeMatches: true, // Includes matching results for highlighting
    });
    // Hide search results by default
    searchResults.classList.add("hidden");
    // Function to open the search modal
    function openSearch(e) {
      e.preventDefault(); // Prevent default action (e.g., form submission)
      e.stopPropagation(); // Stop event from bubbling up the DOM
      searchModal.classList.remove("hidden"); // Show modal
      document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
      setTimeout(() => searchInput.focus(), 100); // Focus input field after a short delay
    }
    // Function to close the search modal
    function closeSearchModal(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      searchModal.classList.add("hidden"); // Hide modal
      document.body.style.overflow = ""; // Restore scrolling
      searchInput.value = ""; // Clear search input
      searchResults.innerHTML = ""; // Clear search results
      searchResults.classList.add("hidden"); // Ensure results remain hidden
    }
    // Function to display search results
    function renderResults(results) {
      // If input is empty, hide results
      if (!searchInput.value.trim()) {
        searchResults.innerHTML = "";
        searchResults.classList.add("hidden");
        return;
      }
      // If no results are found, display a message
      if (results.length === 0) {
        searchResults.innerHTML = `
        <div class="p-8">
            <Text tag="h3" variant="textBase" class="font-medium text-zinc-500 font-medium">
              There's nothing here,...
            </Text>
        </div>
        `;
        searchResults.classList.remove("hidden");
        return;
      }
      // Generate HTML for each search result
      searchResults.innerHTML = results
        .map(
          (result) => `
            <a href="/blog/posts/${result.item.slug}" class="block p-8 hover:bg-zinc-100 duration-300 dark:hover:bg-white/5">
              <h3  class="font-medium text-sm text-zinc-900 dark:text-white block">
                ${result.item.title}
              </h3>
              <p  class="text-zinc-500 text-xs block">
                ${result.item.description}
              </p>
            </a>
          `,
        )
        .join(""); // Join all results into a single string of HTML
      // Make the search results visible
      searchResults.classList.remove("hidden");
    }
    // Add event listeners to open the search modal
    searchButton.addEventListener("click", openSearch);
    searchButton.addEventListener("touchend", openSearch); // For mobile devices
    // Add event listeners to close the search modal
    closeSearch.addEventListener("click", closeSearchModal);
    closeSearch.addEventListener("touchend", closeSearchModal);
    // Close modal when clicking on the overlay (outside the modal)
    modalOverlay.addEventListener("click", closeSearchModal);
    modalOverlay.addEventListener("touchend", closeSearchModal);
    // Listen for user input and perform a search
    searchInput.addEventListener("input", (e) => {
      const value = e.target.value.trim(); // Get search input value
      const results = value ? fuse.search(value) : []; // Perform search only if input isn't empty
      renderResults(results); // Display search results
    });
    // Close search modal when the Escape key is pressed
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
        closeSearchModal();
      }
    });
  });
</script>

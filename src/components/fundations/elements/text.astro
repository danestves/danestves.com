---
export interface Props {
  tag?: "a" | "p" | "em" | "span" | "small" | "strong" | "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6"; // Defines allowed HTML tags
  id?: string; // Optional 'id' attribute
  rel?: string; // Optional rel attribute for anchor tags
  style?: string; // Specifies inline styles
  target?: string; // Optional target attribute for links
  href?: string; // Optional 'href' attribute for anchor tags
  title?: string; // Optional title attribute for anchor tags
  variant?: string; // Specifies the style variant of the text
  class?: string; // Optional prop for additional custom classes
  ariaLabel?: string; // Optional aria-label attribute for anchor tags
  underlined?: boolean; // Optional prop to enable underline hover effect
}

// Define text styles for each variant: Uses fluid typography
const textStyles: Record<string, string> = {
  display6XL: "text-4xl  sm:text-7xl md:text-9xl lg:text-[12rem]",
  display5XL: "text-4xl  sm:text-7xl md:text-8xl lg:text-[10rem]",
  display4XL: "text-4xl  sm:text-7xl md:text-8xl lg:text-9xl",
  display3XL: "text-5xl  sm:text-6xl md:text-7xl lg:text-8xl",
  display2XL: "text-5xl  sm:text-5xl md:text-6xl lg:text-7xl",
  displayXL: "text-4xl  sm:text-4xl md:text-5xl lg:text-6xl",
  displayLG: "text-3xl  sm:text-3xl md:text-4xl lg:text-5xl",
  displayMD: "text-2xl  md:text-3xl lg:text-4xl",
  displaySM: "text-xl   md:text-2xl lg:text-3xl",
  displayXS: "text-xl  md:text-xl lg:text-2xl",
  textXL: "text-xl sm:text-xl md:text-2xl",
  textLG: "text-[min(2.4vh,70px)]",
  textBase: "text-base",
  textSM: "text-sm ",
  textXS: "text-xs ",
};

// Destructure props with default values
const {
  tag: Tag = "p", // Defaults to paragraph tag
  class: className = "", // No additional classes by default
  variant, // No default variant
  underlined = false, // Underline effect is off by default
  ...rest // Collect remaining props
} = Astro.props;

// Get the base classes for the specified variant if it exists
const baseClasses = variant ? textStyles[variant] || textStyles.textBase : "";

// Define underline classes if the tag is 'a' and underlined is true
const underlineClasses =
  Tag === "a" && underlined
    ? "relative group after:content-[''] after:absolute after:left-0 after:bottom-0 after:w-full after:h-0.5 after:bg-black dark:after:bg-white after:scale-x-0 after:origin-left after:transition-transform after:duration-300 hover:after:scale-x-100"
    : "";

// Combine base classes, underline classes, and any additional custom classes
const combinedClasses = `${baseClasses} ${underlineClasses} ${className}`.trim();
---

<Tag class={combinedClasses} {...rest}>
  <slot name="left-icon" />
  <slot />
  <slot name="right-icon" />
</Tag>
